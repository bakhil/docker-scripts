#!/bin/bash

########### Default values #######################
CPUS_TO_USE='4.0'
GPUS_TO_USE=1
PULL_FROM='pytorch/pytorch'
FORCE_BUILD='no'
CALLED_AS="${CALLED_AS:-$0}"
STOP_PREVIOUS='no'
FORCE_STOP='no'
##################################################

########## Help ##################################
show_help() {
    echo ''
    echo "Usage: $CALLED_AS [OPTIONS]"
    echo ''
    echo 'Get into a container. By default, if container is running,'
    echo 'you are attached to it. If no container is running, a new'
    echo 'one is started using a previously saved (committed) image.'
    echo 'If an image does not exist, a new one is built by pulling'
    echo 'a docker image from dockerhub.'
    echo ''
    echo 'The image and container for you are:'
    echo "  ${USER}_image and ${USER}_container"
    echo ''
    echo 'Options:'
    echo '  -c NCPUS or --cpus=NCPUS'
    echo "          Container's throughput throttled to"
    echo '          NCPUS fraction of total number of CPUs.'
    echo '          Default 4.0.'
    echo '  -f or --force'
    echo '          Builds from fresh new image even if'
    echo '          one exists on disk, not set by default'
    echo '  -g NGPUS or --gpus=NGPUS'
    echo '          Allocates NGPUS number of GPUs to'
    echo '          container. Default 1.'
    echo '  -h or --help'
    echo '          Show this help.'
    echo '  -i IMAGE or --image=IMAGE'
    echo '          Pulls IMAGE from dockerhub as a base and'
    echo '          builds new image. Automatically enables the'
    echo '          -f and -s options. Default pytorch/pytorch'
    echo '  -s or --stop'
    echo '          Stop previously running container (if)'
    echo '          and start new one, not set by default'
}
##################################################

SOPTIONS="c:fg:hi:s"
LOPTIONS="cpus:,force,gpus:,help,image:,stop"
OPTS=$(getopt -a -q -n "$CALLED_AS" -o "$SOPTIONS" -l "$LOPTIONS" -- "$@")
if [[ $? -ne 0 ]]; then
    echo "Incorrect usage of $CALLED_AS. Please see help below."
    show_help
    exit 1
fi
eval set -- "$OPTS"
while [[ $# -ne 0 ]]; do
    case "$1" in
        -c|--cpus)
            CPUS_TO_USE="$2"
            shift 2;;
        -f|--force)
            FORCE_BUILD="yes"
            shift;;
        -g|--gpus)
            GPUS_TO_USE="$2"
            shift 2;;
        -h|--help)
            show_help
            exit 1;;
        -i|--image)
            PULL_FROM="$2"
            shift 2;;
        -s|--stop)
            FORCE_STOP="yes"
            shift;;
        --)
            shift;;
        *)
            echo "Incorrect usage of $CALLED_AS. Please see help below."
            show_help
            exit 1;;
    esac
done

#if [[ "$(docker images -q ${USER}_image)" == "" ]] || [[ $FORCE_BUILD == "yes" ]]; then
#    echo '
#        FROM'"${PULL_FROM}"'
#        RUN mkdir -p /expose && python -m pip install jupyter
#        WORKDIR /expose
#        CMD jupyter notebook --no-browser --allow-root' \
#    | sed "s/[\s \t]*//" | sed "/^[\s \t]*$/d" \
#    | docker build -t ${USER}_image -
#fi
#
#docker run -d -v /home/${USER}/expose:/expose --rm --network=host \
#    --name=${USER}_container --cpus="${CPUS_TO_USE}" ${USER}_image \
#    && sleep 3 && docker container logs ${USER}_container | grep 'http'
#
